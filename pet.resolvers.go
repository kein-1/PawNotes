package pawnotes

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/kein-1/pawnotes/ent"
	"github.com/kein-1/pawnotes/ent/pet"
	"github.com/kein-1/pawnotes/ent/user"
)

// CreatePet is the resolver for the createPet field.
func (r *mutationResolver) CreatePet(ctx context.Context, input ent.CreatePetInput) (*ent.Pet, error) {
	user, err := r.client.User.Query().Where(
		user.ID(8589934592)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("No user found %w", err)
	}

	return r.client.Pet.Create().SetInput(input).SetOwner(user).Save(ctx)
}

// DeletePet is the resolver for the deletePet field.
func (r *mutationResolver) DeletePet(ctx context.Context, id int) (*ent.Pet, error) {
	panic(fmt.Errorf("not implemented: DeletePet - deletePet"))
}

// UpdatePet is the resolver for the updatePet field.
func (r *mutationResolver) UpdatePet(ctx context.Context, id int, input ent.UpdatePetInput) (*ent.Pet, error) {
	panic(fmt.Errorf("not implemented: UpdatePet - updatePet"))
}

// GetPet is the resolver for the getPet field.
func (r *queryResolver) GetPet(ctx context.Context, id int) (*ent.Pet, error) {
	return r.client.Pet.Query().Where(
		pet.ID(id)).Only(ctx)
}

// GetOwner is the resolver for the getOwner field.
func (r *queryResolver) GetOwner(ctx context.Context, id int) (*Owner, error) {
	panic(fmt.Errorf("not implemented: GetOwner - getOwner"))
}

// GetPets is the resolver for the getPets field.
func (r *queryResolver) GetPets(ctx context.Context, userID int) ([]*ent.Pet, error) {
	return r.client.Pet.Query().All(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
