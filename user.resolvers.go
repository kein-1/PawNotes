package pawnotes

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/kein-1/pawnotes/ent"
	custommiddleware "github.com/kein-1/pawnotes/middleware"
	"golang.org/x/crypto/bcrypt"
)

// TODO : If i want to add the pets in this mutation, must reference : "Create edges with mutations on ent"
// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	// hash password

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("Failed to hash the password")
	}

	// add check for unique

	input.Password = string(hashedPassword)

	return r.client.User.Create().SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// TestMutation is the resolver for the testMutation field.
func (r *mutationResolver) TestMutation(ctx context.Context) (*string, error) {
	userID := ctx.Value(custommiddleware.UserKey)
	fmt.Println("The user id is:", userID)
	s := "good user"
	return &s, nil
}
