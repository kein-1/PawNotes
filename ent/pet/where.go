// Code generated by ent, DO NOT EDIT.

package pet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kein-1/pawnotes/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldAge, v))
}

// Breed applies equality check predicate on the "breed" field. It's identical to BreedEQ.
func Breed(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldWeight, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldDob, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldName, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldAge, v))
}

// BreedEQ applies the EQ predicate on the "breed" field.
func BreedEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// BreedNEQ applies the NEQ predicate on the "breed" field.
func BreedNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldBreed, v))
}

// BreedIn applies the In predicate on the "breed" field.
func BreedIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldBreed, vs...))
}

// BreedNotIn applies the NotIn predicate on the "breed" field.
func BreedNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldBreed, vs...))
}

// BreedGT applies the GT predicate on the "breed" field.
func BreedGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldBreed, v))
}

// BreedGTE applies the GTE predicate on the "breed" field.
func BreedGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldBreed, v))
}

// BreedLT applies the LT predicate on the "breed" field.
func BreedLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldBreed, v))
}

// BreedLTE applies the LTE predicate on the "breed" field.
func BreedLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldBreed, v))
}

// BreedContains applies the Contains predicate on the "breed" field.
func BreedContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldBreed, v))
}

// BreedHasPrefix applies the HasPrefix predicate on the "breed" field.
func BreedHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldBreed, v))
}

// BreedHasSuffix applies the HasSuffix predicate on the "breed" field.
func BreedHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldBreed, v))
}

// BreedEqualFold applies the EqualFold predicate on the "breed" field.
func BreedEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldBreed, v))
}

// BreedContainsFold applies the ContainsFold predicate on the "breed" field.
func BreedContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldBreed, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldWeight, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldCreatedAt, v))
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldDob, v))
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldDob, v))
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldDob, vs...))
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldDob, vs...))
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldDob, v))
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldDob, v))
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldDob, v))
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldDob, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.NotPredicates(p))
}
